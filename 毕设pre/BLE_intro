
### **一、整体结构概述**

1. **引入库**：
   - 导入所有需要的库，包括传感器库和BLE库。

2. **定义全局变量和对象**：
   - 创建传感器对象、BLE服务和特征，以及存储传感器数据的变量。

3. **在`setup()`函数中**：
   - 初始化串口通信、传感器和BLE模块。
   - 设置设备名称、服务和特征，并开始广播。

4. **在`loop()`函数中**：
   - 等待并检测中央设备的连接。
   - 在连接期间，循环读取传感器数据，进行处理和融合。
   - 将处理后的数据写入BLE特征，供中央设备读取。

5. **实现各个功能函数**：
   - 读取和处理传感器数据的函数。
   - 数据融合和滤波的函数。
   - 心率检测和血氧计算函数。

---

### **二、具体步骤指导**

#### **1. 引入库**

```cpp
#include <Arduino_LSM9DS1.h>          // IMU传感器库
#include <Wire.h>                     // I2C通信库
#include <SparkFun_MAX3010x_Sensor.h> // MAX30102传感器库
#include <ArduinoBLE.h>               // BLE通信库
```

#### **2. 定义全局变量和对象**

- **传感器对象**：

  ```cpp
  MAX30105 particleSensor; // MAX30102传感器对象
  ```

- **BLE服务和特征**：

  ```cpp
  BLEService sensorService("180A"); // 自定义服务UUID

  // 定义BLE特征
  BLECharacteristic imuCharacteristic("2A5A", BLENotify, sizeof(float) * 6); // IMU数据特征
  BLECharacteristic hrCharacteristic("2A37", BLENotify, sizeof(float));      // 心率数据特征
  BLECharacteristic spo2Characteristic("2A5F", BLENotify, sizeof(float));    // 血氧数据特征
  ```

- **存储传感器数据的变量**：

  ```cpp
  // IMU数据
  float ax, ay, az; // 加速度计数据
  float gx, gy, gz; // 陀螺仪数据

  // 姿态角度
  float roll, pitch;

  // 心率和血氧数据
  float heartRate;
  float spo2;
  ```

#### **3. 在`setup()`函数中**

- **初始化串口通信**：

  ```cpp
  Serial.begin(115200);
  while (!Serial);
  ```

- **初始化传感器**：

  ```cpp
  // 初始化IMU传感器
  if (!IMU.begin()) {
    Serial.println("无法初始化IMU传感器！");
    while (1);
  }

  // 初始化MAX30102传感器
  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) {
    Serial.println("无法找到MAX30102传感器！");
    while (1);
  }
  ```

- **初始化BLE模块**：

  ```cpp
  if (!BLE.begin()) {
    Serial.println("无法初始化BLE模块！");
    while (1);
  }

  BLE.setLocalName("BadmintonTracker");       // 设置设备名称
  BLE.setAdvertisedService(sensorService);    // 设置要广播的服务

  // 将特征添加到服务
  sensorService.addCharacteristic(imuCharacteristic);
  sensorService.addCharacteristic(hrCharacteristic);
  sensorService.addCharacteristic(spo2Characteristic);

  // 将服务添加到BLE
  BLE.addService(sensorService);

  // 开始广播
  BLE.advertise();
  ```

#### **4. 在`loop()`函数中**

- **等待并检测中央设备连接**：

  ```cpp
  BLEDevice central = BLE.central();

  if (central) {
    Serial.print("已连接到中央设备: ");
    Serial.println(central.address());

    while (central.connected()) {
      // 在这里读取传感器数据，进行处理，并通过BLE发送
    }

    Serial.print("中央设备已断开连接: ");
    Serial.println(central.address());
  }
  ```

- **读取传感器数据、处理并通过BLE发送**：

  在`while (central.connected())`循环中，添加以下步骤：

  - **读取和处理IMU数据**：

    ```cpp
    readAndFuseIMUData(); // 自定义函数，读取并融合IMU数据
    ```

  - **读取和处理心率、血氧数据**：

    ```cpp
    readAndFilterHeartRateAndSpO2(); // 自定义函数，读取并滤波心率和血氧数据
    ```

  - **将数据写入BLE特征**：

    ```cpp
    // 创建IMU数据数组
    float imuData[6] = {ax, ay, az, gx, gy, gz};

    // 将IMU数据写入特征
    imuCharacteristic.writeValue((uint8_t*)imuData, sizeof(imuData));

    // 将心率和血氧数据写入特征
    hrCharacteristic.writeValue(heartRate);
    spo2Characteristic.writeValue(spo2);
    ```

  - **控制传输频率**：

    ```cpp
    delay(100); // 根据需要调整
    ```

#### **5. 实现各个功能函数**

- **读取和融合IMU数据的函数**：

  ```cpp
  void readAndFuseIMUData() {
    // 实现传感器数据读取和互补滤波器融合
    // 更新 ax, ay, az, gx, gy, gz, roll, pitch 变量
  }
  ```

- **读取和滤波心率、血氧数据的函数**：

  ```cpp
  void readAndFilterHeartRateAndSpO2() {
    // 实现心率和血氧数据的读取和滤波
    // 更新 heartRate, spo2 变量
  }
  ```

---

### **三、注意事项**

1. **数据类型和字节序**：

   - 在通过BLE传输浮点数时，需要注意接收端的数据解析方式。
   - 可以将浮点数转换为字节数组，或者在发送前进行适当的编码。

2. **BLE特征的数据长度限制**：

   - 确保单个特征的数据长度不超过20字节。
   - 如果需要传输更多数据，可以拆分成多个特征或多次传输。

3. **数据传输频率**：

   - BLE通信适合低带宽的数据传输，避免过于频繁地发送数据。
   - 根据实际需求，合理设置数据传输的间隔时间。

4. **接收端的实现**：

   - 使用支持BLE的设备（如智能手机、平板电脑）作为中央设备，编写相应的应用程序接收并解析数据。
   - 可以使用现有的BLE调试工具（如nRF Connect）进行测试。

---

### **四、总结**

通过将BLE通信部分的代码与传感器数据读取和处理的代码整合，您可以实现一个完整的系统：

- 设备通过BLE广播服务，等待中央设备连接。
- 一旦连接，设备持续读取传感器数据，进行必要的处理和融合。
- 处理后的数据通过BLE特征发送到中央设备。
- 中央设备接收数据，进行显示、存储或进一步处理。

在编写代码时，建议逐步测试每个功能模块，确保各部分正常工作，然后再进行整合。

---

如果您在整合代码的过程中遇到任何具体的问题，或者对某些部分的实现有疑问，请告诉我，我会尽力为您提供进一步的帮助。
